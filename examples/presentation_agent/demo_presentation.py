"""
Demo t·∫°o presentation m·∫´u v·ªõi static data
Kh√¥ng c·∫ßn API key ƒë·ªÉ ch·∫°y demo n√†y
"""

import json
import os
from datetime import datetime

def create_demo_presentation():
    """T·∫°o m·ªôt presentation demo v·ªÅ 'Python c∆° b·∫£n'"""
    
    # Topic demo
    topic = "Python Programming c∆° b·∫£n cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu"
    
    # T·∫°o demo outline
    outline = {
        "title": topic,
        "estimated_duration": "20-25 ph√∫t",
        "target_audience": "Ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu l·∫≠p tr√¨nh",
        "sections": [
            {
                "id": 1,
                "title": "Gi·ªõi thi·ªáu v·ªÅ Python",
                "slides_count": 2,
                "duration": "3 ph√∫t",
                "objectives": ["Hi·ªÉu Python l√† g√¨", "∆Øu ƒëi·ªÉm c·ªßa Python"]
            },
            {
                "id": 2, 
                "title": "C√†i ƒë·∫∑t Python Environment",
                "slides_count": 2,
                "duration": "4 ph√∫t",
                "objectives": ["C√†i ƒë·∫∑t Python", "Setup IDE"]
            },
            {
                "id": 3,
                "title": "Syntax c∆° b·∫£n",
                "slides_count": 3,
                "duration": "6 ph√∫t", 
                "objectives": ["Variables", "Data types", "Basic operations"]
            },
            {
                "id": 4,
                "title": "Control Flow",
                "slides_count": 3,
                "duration": "6 ph√∫t",
                "objectives": ["If/else", "Loops", "Functions"]
            },
            {
                "id": 5,
                "title": "Th·ª±c h√†nh & K·∫øt lu·∫≠n",
                "slides_count": 2,
                "duration": "6 ph√∫t",
                "objectives": ["B√†i t·∫≠p demo", "Next steps"]
            }
        ]
    }
    
    # T·∫°o demo slides content
    slides_content = {
        "title": topic,
        "total_slides": 12,
        "slides": [
            {
                "id": 1,
                "title": "Python Programming c∆° b·∫£n",
                "subtitle": "Cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu",
                "content": [
                    "Ng√¥n ng·ªØ l·∫≠p tr√¨nh d·ªÖ h·ªçc",
                    "Syntax ƒë∆°n gi·∫£n, d·ªÖ hi·ªÉu", 
                    "C·ªông ƒë·ªìng l·ªõn v√† h·ªó tr·ª£ t·ªët",
                    "·ª®ng d·ª•ng r·ªông r√£i: Web, AI, Data Science"
                ],
                "image_suggestions": ["python-logo", "programming-workspace"],
                "speaker_notes": "Ch√†o m·ª´ng c√°c b·∫°n ƒë·∫øn v·ªõi workshop Python c∆° b·∫£n. H√¥m nay ch√∫ng ta s·∫Ω t√¨m hi·ªÉu v·ªÅ Python - m·ªôt ng√¥n ng·ªØ l·∫≠p tr√¨nh r·∫•t ph·ªï bi·∫øn v√† d·ªÖ h·ªçc. Python ƒë∆∞·ª£c thi·∫øt k·∫ø v·ªõi tri·∫øt l√Ω 'ƒë∆°n gi·∫£n l√† t·ªët nh·∫•t', gi√∫p ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu c√≥ th·ªÉ ti·∫øp c·∫≠n l·∫≠p tr√¨nh m·ªôt c√°ch d·ªÖ d√†ng."
            },
            {
                "id": 2,
                "title": "T·∫°i sao ch·ªçn Python?",
                "content": [
                    "‚úÖ Syntax g·∫ßn v·ªõi ng√¥n ng·ªØ t·ª± nhi√™n",
                    "‚úÖ H·ªçc curve tho·∫£i m√°i cho beginners",
                    "‚úÖ Libraries v√† frameworks phong ph√∫",
                    "‚úÖ Job opportunities cao",
                    "‚úÖ Open source v√† mi·ªÖn ph√≠"
                ],
                "speaker_notes": "Python c√≥ nhi·ªÅu ∆∞u ƒëi·ªÉm v∆∞·ª£t tr·ªôi. ƒê·∫ßu ti√™n l√† syntax r·∫•t g·∫ßn v·ªõi ng√¥n ng·ªØ t·ª± nhi√™n, v√≠ d·ª• thay v√¨ vi·∫øt nh·ªØng c√¢u l·ªánh ph·ª©c t·∫°p, b·∫°n c√≥ th·ªÉ vi·∫øt 'if name == John' r·∫•t d·ªÖ hi·ªÉu. Th·ª© hai, Python c√≥ h·ªçc curve tho·∫£i m√°i, nghƒ©a l√† b·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu vi·∫øt code ƒë∆°n gi·∫£n ngay t·ª´ ng√†y ƒë·∫ßu."
            },
            {
                "id": 3,
                "title": "C√†i ƒë·∫∑t Python",
                "content": [
                    "T·∫£i t·ª´ python.org",
                    "Ch·ªçn phi√™n b·∫£n Python 3.x",
                    "Tick 'Add Python to PATH'",
                    "Verify: python --version"
                ],
                "image_suggestions": ["python-installation", "command-line"],
                "speaker_notes": "ƒê·ªÉ b·∫Øt ƒë·∫ßu v·ªõi Python, tr∆∞·ªõc ti√™n ch√∫ng ta c·∫ßn c√†i ƒë·∫∑t Python tr√™n m√°y t√≠nh. C√°c b·∫°n v√†o trang python.org, t·∫£i phi√™n b·∫£n m·ªõi nh·∫•t c·ªßa Python 3. Quan tr·ªçng l√† ph·∫£i tick v√†o √¥ 'Add Python to PATH' ƒë·ªÉ c√≥ th·ªÉ ch·∫°y Python t·ª´ command line. Sau khi c√†i xong, m·ªü terminal v√† g√µ 'python --version' ƒë·ªÉ ki·ªÉm tra."
            },
            {
                "id": 4,
                "title": "Ch·ªçn IDE/Editor",
                "content": [
                    "üÜì VS Code (khuy√™n d√πng)",
                    "üÜì PyCharm Community",
                    "üÜì Jupyter Notebook", 
                    "üÜì Sublime Text",
                    "üí∞ PyCharm Professional"
                ],
                "speaker_notes": "ƒê·ªÉ vi·∫øt code Python hi·ªáu qu·∫£, b·∫°n n√™n ch·ªçn m·ªôt IDE ho·∫∑c editor ph√π h·ª£p. T√¥i khuy√™n d√πng VS Code v√¨ n√≥ mi·ªÖn ph√≠, nh·∫π, v√† c√≥ nhi·ªÅu extension h·ªó tr·ª£ Python r·∫•t t·ªët. PyCharm c≈©ng l√† l·ª±a ch·ªçn tuy·ªát v·ªùi v·ªõi nhi·ªÅu t√≠nh nƒÉng advanced. Jupyter Notebook r·∫•t ph√π h·ª£p cho data science v√† machine learning."
            },
            {
                "id": 5,
                "title": "Variables v√† Data Types",
                "content": [
                    "name = 'John'  # String",
                    "age = 25       # Integer", 
                    "height = 1.75  # Float",
                    "is_student = True  # Boolean",
                    "fruits = ['apple', 'banana']  # List"
                ],
                "speaker_notes": "Python c√≥ c√°c ki·ªÉu d·ªØ li·ªáu c∆° b·∫£n. String ƒë·ªÉ l∆∞u text, Integer cho s·ªë nguy√™n, Float cho s·ªë th·∫≠p ph√¢n, Boolean cho True/False, v√† List ƒë·ªÉ l∆∞u nhi·ªÅu gi√° tr·ªã. ƒêi·ªÅu ƒë·∫∑c bi·ªát l√† Python t·ª± ƒë·ªông nh·∫≠n bi·∫øt ki·ªÉu d·ªØ li·ªáu, b·∫°n kh√¥ng c·∫ßn khai b√°o nh∆∞ int, string."
            },
            {
                "id": 6,
                "title": "Basic Operations",
                "content": [
                    "# Arithmetic",
                    "result = 10 + 5  # 15",
                    "# String operations", 
                    "full_name = first + ' ' + last",
                    "# List operations",
                    "fruits.append('orange')"
                ],
                "speaker_notes": "Python h·ªó tr·ª£ c√°c ph√©p to√°n c∆° b·∫£n nh∆∞ c·ªông, tr·ª´, nh√¢n, chia. V·ªõi string, b·∫°n c√≥ th·ªÉ n·ªëi chu·ªói b·∫±ng d·∫•u +. V·ªõi list, c√≥ th·ªÉ th√™m ph·∫ßn t·ª≠ b·∫±ng append(), x√≥a b·∫±ng remove(). C√°c operations n√†y r·∫•t intuitive v√† d·ªÖ nh·ªõ."
            },
            {
                "id": 7,
                "title": "Print v√† Input",
                "content": [
                    "# Output",
                    "print('Hello World!')",
                    "print(f'T√¥i {age} tu·ªïi')",
                    "# Input",
                    "name = input('T√™n b·∫°n l√† g√¨? ')",
                    "age = int(input('B·∫°n bao nhi√™u tu·ªïi? '))"
                ],
                "speaker_notes": "Print() ƒë·ªÉ hi·ªÉn th·ªã output ra m√†n h√¨nh. F-string (v·ªõi f'') l√† c√°ch hi·ªán ƒë·∫°i ƒë·ªÉ format string trong Python. Input() ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu t·ª´ user, l∆∞u √Ω input() lu√¥n tr·∫£ v·ªÅ string n√™n c·∫ßn convert n·∫øu mu·ªën s·ªë."
            },
            {
                "id": 8,
                "title": "Conditional Statements",
                "content": [
                    "if age >= 18:",
                    "    print('B·∫°n ƒë√£ tr∆∞·ªüng th√†nh')",
                    "elif age >= 13:",
                    "    print('B·∫°n l√† teenager')", 
                    "else:",
                    "    print('B·∫°n c√≤n nh·ªè')"
                ],
                "speaker_notes": "If/elif/else gi√∫p ch∆∞∆°ng tr√¨nh ƒë∆∞a ra quy·∫øt ƒë·ªãnh. L∆∞u √Ω Python s·ª≠ d·ª•ng indentation (th·ª•t l·ªÅ) thay v√¨ d·∫•u {} ƒë·ªÉ ph√¢n bi·ªát block code. Th∆∞·ªùng d√πng 4 spaces cho m·ªói level indentation."
            },
            {
                "id": 9,
                "title": "Loops - For Loop",
                "content": [
                    "# Loop through list",
                    "for fruit in fruits:",
                    "    print(fruit)",
                    "# Loop with range", 
                    "for i in range(5):",
                    "    print(f'S·ªë {i}')"
                ],
                "speaker_notes": "For loop ƒë·ªÉ l·∫∑p qua c√°c ph·∫ßn t·ª≠. C√≥ th·ªÉ loop qua list, string, ho·∫∑c d√πng range() ƒë·ªÉ t·∫°o d√£y s·ªë. Range(5) t·∫°o ra 0,1,2,3,4. For loop r·∫•t m·∫°nh m·∫Ω v√† ƒë∆∞·ª£c d√πng th∆∞·ªùng xuy√™n trong Python."
            },
            {
                "id": 10,
                "title": "Functions",
                "content": [
                    "def greet(name):",
                    "    return f'Xin ch√†o {name}!'",
                    "",
                    "# G·ªçi function",
                    "message = greet('John')",
                    "print(message)  # Xin ch√†o John!"
                ],
                "speaker_notes": "Functions gi√∫p t√°i s·ª≠ d·ª•ng code v√† t·ªï ch·ª©c ch∆∞∆°ng tr√¨nh t·ªët h∆°n. ƒê·ªãnh nghƒ©a v·ªõi def, c√≥ th·ªÉ c√≥ parameters v√† return value. Functions l√† building blocks quan tr·ªçng c·ªßa programming."
            },
            {
                "id": 11,
                "title": "B√†i t·∫≠p th·ª±c h√†nh",
                "content": [
                    "Vi·∫øt ch∆∞∆°ng tr√¨nh:",
                    "1. Nh·∫≠p t√™n v√† tu·ªïi",
                    "2. Ki·ªÉm tra tu·ªïi >= 18", 
                    "3. In th√¥ng b√°o ph√π h·ª£p",
                    "4. Bonus: T√≠nh nƒÉm sinh"
                ],
                "speaker_notes": "B√¢y gi·ªù ch√∫ng ta s·∫Ω th·ª±c h√†nh v·ªõi m·ªôt b√†i t·∫≠p ƒë∆°n gi·∫£n. C√°c b·∫°n h√£y vi·∫øt ch∆∞∆°ng tr√¨nh nh·∫≠p t√™n v√† tu·ªïi, sau ƒë√≥ ki·ªÉm tra xem ng∆∞·ªùi ƒë√≥ ƒë√£ tr∆∞·ªüng th√†nh ch∆∞a v√† in th√¥ng b√°o. Ai l√†m nhanh c√≥ th·ªÉ th√™m t√≠nh nƒÉng t√≠nh nƒÉm sinh."
            },
            {
                "id": 12,
                "title": "Next Steps",
                "content": [
                    "üéØ H·ªçc ti·∫øp: OOP, Libraries",
                    "üéØ Th·ª±c h√†nh: HackerRank, LeetCode",
                    "üéØ Projects: Web app, Data analysis",
                    "üéØ Community: Python Vietnam",
                    "üìö Resources: python.org, realpython.com"
                ],
                "speaker_notes": "Ch√∫c m·ª´ng c√°c b·∫°n ƒë√£ ho√†n th√†nh workshop Python c∆° b·∫£n! ƒê·ªÉ ti·∫øp t·ª•c h·ªçc Python, t√¥i khuy√™n c√°c b·∫°n n√™n h·ªçc v·ªÅ OOP, th∆∞ vi·ªán nh∆∞ pandas, requests. H√£y th·ª±c h√†nh th∆∞·ªùng xuy√™n tr√™n c√°c trang nh∆∞ HackerRank. V√† quan tr·ªçng nh·∫•t l√† b·∫Øt ƒë·∫ßu l√†m projects th·ª±c t·∫ø. C·∫£m ∆°n c√°c b·∫°n ƒë√£ tham gia!"
            }
        ]
    }
    
    # L∆∞u files
    with open('topic.txt', 'w', encoding='utf-8') as f:
        f.write(topic)
    
    with open('presentation_outline.json', 'w', encoding='utf-8') as f:
        json.dump(outline, f, ensure_ascii=False, indent=2)
    
    with open('slides_content.json', 'w', encoding='utf-8') as f:
        json.dump(slides_content, f, ensure_ascii=False, indent=2)
    
    # T·∫°o speaker guide
    speaker_guide = f"""
# üé§ Speaker Guide - {topic}

## üìä Overview
- **Th·ªùi l∆∞·ª£ng**: {outline['estimated_duration']}
- **Audience**: {outline['target_audience']}
- **T·ªïng slides**: {slides_content['total_slides']}

## üéØ Objectives
Sau workshop n√†y, h·ªçc vi√™n s·∫Ω:
- Hi·ªÉu ƒë∆∞·ª£c Python l√† g√¨ v√† t·∫°i sao n√™n h·ªçc
- Bi·∫øt c√°ch c√†i ƒë·∫∑t v√† setup environment
- N·∫Øm ƒë∆∞·ª£c syntax c∆° b·∫£n c·ªßa Python
- C√≥ th·ªÉ vi·∫øt ch∆∞∆°ng tr√¨nh Python ƒë∆°n gi·∫£n

## ‚è∞ Timeline
{chr(10).join([f"- {section['title']}: {section['duration']}" for section in outline['sections']])}

## üí° Presentation Tips

### Slide 1-2: Introduction (3 ph√∫t)
- T·∫°o kh√¥ng kh√≠ th√¢n thi·ªán, h·ªèi kinh nghi·ªám l·∫≠p tr√¨nh c·ªßa audience
- Nh·∫•n m·∫°nh Python d·ªÖ h·ªçc, ƒë·ª´ng lo l·∫Øng n·∫øu ch∆∞a c√≥ kinh nghi·ªám

### Slide 3-4: Setup (4 ph√∫t)  
- Demo live c√†i ƒë·∫∑t n·∫øu c√≥ th·ªÉ
- Chu·∫©n b·ªã link download s·∫µn
- C√≥ backup plan n·∫øu internet ch·∫≠m

### Slide 5-7: Syntax (6 ph√∫t)
- Code live, ƒë·ª´ng ch·ªâ ƒë·ªçc slides
- Khuy·∫øn kh√≠ch audience follow along
- Gi·∫£i th√≠ch t·∫°i sao Python kh√¥ng c·∫ßn declare types

### Slide 8-10: Control Flow (6 ph√∫t)
- Nh·∫•n m·∫°nh indentation quan tr·ªçng trong Python
- Cho v√≠ d·ª• th·ª±c t·∫ø, d·ªÖ relate
- Demo loops v·ªõi examples vui nh·ªôn

### Slide 11: Practice (6 ph√∫t)
- Cho audience time coding
- Walk around, help c√° nh√¢n
- Share solutions v√† discuss

### Slide 12: Wrap-up (2 ph√∫t)
- Encourage practice regularly
- Share resources v√† community links
- Q&A session

## üö® Common Questions & Answers

**Q: Python c√≥ kh√≥ h·ªçc kh√¥ng?**
A: Python ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ d·ªÖ h·ªçc. N·∫øu b·∫°n c√≥ th·ªÉ ƒë·ªçc ti·∫øng Anh, b·∫°n c√≥ th·ªÉ hi·ªÉu Python code.

**Q: T√¥i c·∫ßn background math ƒë·ªÉ h·ªçc Python kh√¥ng?**
A: Kh√¥ng nh·∫•t thi·∫øt. T√πy v√†o m·ª•c ƒë√≠ch s·ª≠ d·ª•ng. Web development th√¨ √≠t math, AI/Data Science th√¨ c·∫ßn nhi·ªÅu h∆°n.

**Q: Python c√≥ ch·∫≠m kh√¥ng?**
A: Python c√≥ slower execution nh∆∞ng development speed nhanh. V√† c√≥ nhi·ªÅu c√°ch optimize khi c·∫ßn.

**Q: N√™n h·ªçc Python version n√†o?**
A: Python 3.x, hi·ªán t·∫°i l√† 3.11+. Python 2 ƒë√£ deprecated.

## üì± Emergency Contacts
- Technical Support: [your-contact]
- Backup slides: [backup-location]

---
*Generated by Presentation Agent System*
*{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}*
"""
    
    with open('speaker_guide.txt', 'w', encoding='utf-8') as f:
        f.write(speaker_guide)
    
    # T·∫°o HTML presentation
    create_demo_html(slides_content)
    
    print("‚úÖ Demo presentation ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
    print("\nüìÅ Files ƒë∆∞·ª£c t·∫°o:")
    print("   ‚úì topic.txt")
    print("   ‚úì presentation_outline.json")
    print("   ‚úì slides_content.json") 
    print("   ‚úì speaker_guide.txt")
    print("   ‚úì presentation.html")
    print(f"\nüéâ M·ªü presentation.html trong browser ƒë·ªÉ xem k·∫øt qu·∫£!")

def create_demo_html(slides_content):
    """T·∫°o HTML presentation t·ª´ slides content"""
    
    # ƒê·ªçc template
    template_path = 'templates/presentation_template.html'
    with open(template_path, 'r', encoding='utf-8') as f:
        template = f.read()
    
    # T·∫°o slides HTML
    slides_html = ""
    speaker_notes = []
    
    for slide in slides_content['slides']:
        slide_html = f'<div class="slide" id="slide-{slide["id"]}">\n'
        
        if slide.get('subtitle'):
            slide_html += f'    <h1>{slide["title"]}</h1>\n'
            slide_html += f'    <p style="font-size: 1.8em; color: #7f8c8d; margin-bottom: 40px;">{slide["subtitle"]}</p>\n'
        else:
            slide_html += f'    <h2>{slide["title"]}</h2>\n'
        
        if slide.get('content'):
            slide_html += '    <ul>\n'
            for item in slide['content']:
                slide_html += f'        <li>{item}</li>\n'
            slide_html += '    </ul>\n'
        
        slide_html += '</div>\n\n'
        slides_html += slide_html
        
        # Speaker notes
        speaker_notes.append(slide.get('speaker_notes', ''))
    
    # Replace template variables
    html_content = template.replace('{{title}}', slides_content['title'])
    html_content = html_content.replace('{{total_slides}}', str(slides_content['total_slides']))
    html_content = html_content.replace('{{slides_content}}', slides_html)
    html_content = html_content.replace('{{speaker_notes}}', json.dumps(speaker_notes, ensure_ascii=False))
    
    # L∆∞u HTML
    with open('presentation.html', 'w', encoding='utf-8') as f:
        f.write(html_content)

if __name__ == "__main__":
    create_demo_presentation()
